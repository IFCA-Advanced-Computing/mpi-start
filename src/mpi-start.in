#!/bin/bash
#
# Copyright (c) 2006-2007 High Performance Computing Center Stuttgart,
#                         University of Stuttgart.  All rights reserved.
# Copyright (c) 2009-2010 Instituto de Fisica de Cantabria, 
#                         CSIC-UC. All rights reserved.
#
#
# Return values of this script:
# 0   - Success

clean_up () {
    debug_msg "Cleaning up mpi-start temporary files."
    MPI_START_CLEANUP_FILES="$MPI_START_CLEANUP_FILES $MPI_START_HOSTFILE $MPI_START_HOST_SLOTS_FILE $MPI_START_MACHINEFILE"
    for file in $MPI_START_CLEANUP_FILES; do
        [ -f $file ] && rm -f $file
    done
    exit
}

trap clean_up EXIT

#======================================================================
# Displays a warning message
#======================================================================
warn_msg () {
    if test "x$I2G_MPI_START_VERBOSE" = "x1" ; then 
        echo "mpi-start [WARNING]:" $@ 1>&2
    fi
}

#======================================================================
# Displays a warning message
#======================================================================
error_msg () {
    echo "mpi-start [ERROR  ]:" $@ 1>&2
}

#======================================================================
# Display a debug message in the case that I2G_MPI_START_DEBUG
# is 1.
#======================================================================
debug_msg () {
    if test "x$I2G_MPI_START_VERBOSE" = "x1" ; then 
        if test "x$I2G_MPI_START_DEBUG" = "x1"  ; then
            echo "mpi-start [DEBUG  ]: "$@ 1>&2
        fi
    fi
}

#======================================================================
# Display a debug message in the case that I2G_MPI_START_DEBUG
# is 1.
#======================================================================
info_msg () {
    if test "x$I2G_MPI_START_VERBOSE" = "x1" ; then 
        echo "mpi-start [INFO   ]: "$@ 1>&2
    fi
}

#======================================================================
# Dump environment.
# $1 level
#======================================================================
dump_env () {
    if test "x$I2G_MPI_START_VERBOSE" = "x1" ; then 
        for i in `env`; do
            echo "mpi-start [DUMPENV]:" $i 1>&2
        done
    fi
}

#======================================================================
# Find the correct parameter for the mktemp program.
#======================================================================
mpi_start_find_mktemp () {
    tempfile=`mktemp 2> /dev/null`
    if test $? -eq 0 ; then
        MPI_START_MKTEMP="mktemp"
    else
        # BSD style mktemp
        tempfile=`mktemp -t MPI_START 2> /dev/null`
        if test $? -ne 0 ; then
            error_msg "Could not find a proper mktemp utility"
            dump_env
            exit 1
        fi
        MPI_START_MKTEMP="mktemp -t MPI_START"
    fi
    rm -f $tempfile
}

#======================================================================
# Activate a MPI by the given information. If there are module
# informations available then the modules system will be used
# otherwise the PATH and LD_LIBRARY_PATH is updated manually.
#
# $1 the MPI prefix path (mandatory)
# $2 the MPI module string (optional)
#======================================================================
mpi_start_activate_mpi () {
    if test "x$2" = "x" ; then
        debug_msg "activate MPI via manually update"
        if test -d "$1" ; then
            export PATH=$1/bin:$PATH
            export LD_LIBRARY_PATH=$1/lib:$LD_LIBRARY_PATH
        fi
    else
        debug_msg "activate MPI via modules : $2"
        for mod in $2 ; do
            debug_msg  "+  module load  $mod"
            module load $mod
        done
    fi
}

#======================================================================
# Create the wrapper that will contain the mpirun call
# It is executed as a child of mpistart in order to allow different
# env variables
#======================================================================
mpi_start_create_wrapper() {
    if test "x$MPI_START_MPI_WRAPPER" = "x" ; then
        export MPI_START_MPI_WRAPPER=`$MPI_START_MKTEMP`
        export MPI_START_CLEANUP_FILES="$MPI_START_CLEANUP_FILES $MPI_START_MPI_WRAPPER"
        cat > $MPI_START_MPI_WRAPPER << EOF
#!/bin/sh
test "x\$I2G_MPI_START_TRACE" = "x1" && set -x
EOF
    fi
}


#======================================================================
# Export a variable for the MPI job. It will be defined only in the
# context of the job (executed in a different process)
#
# $1 the name of the variable
# rest of parameters: variable value 
#======================================================================
mpi_start_export_variable () {
    mpi_start_create_wrapper
    var_name=$1
    shift
    if test "x$*" != "x"; then  
        echo "export $var_name=\"$*\"" >> $MPI_START_MPI_WRAPPER
    else
        echo "export $var_name" >> $MPI_START_MPI_WRAPPER
    fi
    export MPI_START_ENV_VARIABLES="$MPI_START_ENV_VARIABLES $var_name"
}

#======================================================================
# Execute the MPI command line in the wrapper
#
# $* command line to execute 
#======================================================================
mpi_start_execute_wrapper() {

    if test "x$MPI_START_DO_NOT_USE_WRAPPER" = "x1" ; then
        if [ "x$I2G_MPI_APPLICATION_STDIN" != "x" -a "x$I2G_MPI_APPLICATION_STDOUT" != "x" ] ; then
            debug_msg "redirecting stdin and stdout"
            $* \> $I2G_MPI_APPLICATION_STDOUT < $I2G_MPI_APPLICATION_STDIN
        else
            $*
        fi
        return $?
    else
        mpi_start_create_wrapper
        # we create a new wrapper for each execution so we can have more than
        # one MPI execution in a single mpi-start call (not sure if it has any use)
        CMD_WRAPPER=`$MPI_START_MKTEMP`
        chmod +x $CMD_WRAPPER
        cat $MPI_START_MPI_WRAPPER > $CMD_WRAPPER
        if [ "x$I2G_MPI_APPLICATION_STDIN" != "x" -a "x$I2G_MPI_APPLICATION_STDOUT" != "x" ] ; then
            debug_msg "redirecting stdin and stdout"
            echo "$* \> $I2G_MPI_APPLICATION_STDOUT < $I2G_MPI_APPLICATION_STDIN" >> $CMD_WRAPPER
        else
            echo "$*" >> $CMD_WRAPPER
        fi
        echo "exit \$?" >> $CMD_WRAPPER
        $CMD_WRAPPER
        err=$?
        rm -f $CMD_WRAPPER
        return $err
    fi
}

#======================================================================
# The main function that binds everything together
#======================================================================
main() {
    #
    # Output general information
    #
    info_msg "************************************************************************" 
    info_msg "UID     = " `whoami` 
    info_msg "HOST    = " `hostname` 
    info_msg "DATE    = " `date`
    info_msg "VERSION =  @VERSION@"  
    info_msg "************************************************************************"

    #
    # setup framework goes here
    #

    # debug me 
    if test "x$I2G_MPI_START_DEBUG" = "x1" ; then 
        debug_msg "dump configuration"
        for var in I2G_MPI_APPLICATION I2G_MPI_APPLICATION_ARGS I2G_MPI_TYPE \
                   I2G_MPI_VERSION I2G_MPI_PRE_RUN_HOOK I2G_MPI_POST_RUN_HOOK \
                   I2G_MPI_PRECOMMAND I2G_MPI_FLAVOUR I2G_MPI_JOB_NUMBER \
                   I2G_MPI_STARTUP_INFO I2G_MPI_RELAY I2G_MPI_SINGLE_PROCESS ; do
            eval value="\${$var}"
            debug_msg "=> ${var}=${value}"
        done
    fi

    # trace me
    if test "x$I2G_MPI_START_TRACE" = "x1"  ; then
        debug_msg "enable debugging"
        set -x
    fi

    # check for valid I2G_MPI_START variable
    if test "x$I2G_MPI_START" = "x" ; then
        error_msg "I2G_MPI_START not set"
        dump_env
        exit 1
    fi

    # check for correct mktemp
    mpi_start_find_mktemp

    # set global variables 
    MPI_START_PREFIX=`dirname $I2G_MPI_START`
    MPI_START_MACHINEFILE=""
    MPI_START_HOSTFILE=""
    MPI_START_HOST_SLOTS_FILE=""
    MPI_START_NHOSTS=0
    MPI_START_NSLOTS=0
    MPI_START_NSLOTS_PER_HOST=0
    MPI_START_MPI_WRAPPER=""
    MPI_START_READY=-1 
    MPI_START_MPI_PREFIX=""
    MPI_START_CLEANUP_FILES=""
    MPI_START_SCHEDULER=""

    # check for scheduling system and set environment variables
    info_msg "search for scheduler"
    for i in $MPI_START_PREFIX/../etc/mpi-start/*.scheduler  ; do 
        # source the function definitions
        unset scheduler
        unset scheduler_available
        unset scheduler_get_machinefile
        debug_msg "source $i"
        . $i
        if test $? -ne 0  ; then 
            warn_msg "failed to source : $i"
        fi

        scheduler=`basename $i .scheduler`

        # check if support for this kind of schedulers is supported
        debug_msg "checking for scheduler support : $scheduler"
        scheduler_available
        result=$?

        if test "x$result" = "x0" ; then 
            info_msg "activate support for $scheduler"

            # support for this scheduler is found. So lets setup the internal environment.
            scheduler_get_machinefile
            result=$?

            if test $? -ne 0 ; then
                error_msg "cannot create machine file"
                dump_env
                exit 2
            fi
    
            debug_msg "dump hosts:"
            for i in `cat $MPI_START_HOSTFILE` ; do
                debug_msg "=> $i"
            done
            if test "x${I2G_MPI_SINGLE_PROCESS}" = "x1" ; then
                export I2G_MPI_NP=$MPI_START_NHOSTS
            else
                export I2G_MPI_NP=$MPI_START_NSLOTS
            fi

            # setup the np count 
            debug_msg "starting with $I2G_MPI_NP processes."

            # mark MPI_START as ready to go 
            MPI_START_READY=0
            export MPI_START_SCHEDULER=$SCHEDULER_NAME
            break
        fi
    done

    # check if we have a scheduler 
    if test $MPI_START_READY -ne 0  ; then 
        error_msg "cannot find scheduler"
        dump_env
        exit 3 
    fi

    debug_msg "check for site environment"

    # check if we should should use default MPI falvour
    if test "x$I2G_MPI_TYPE" = "x"  ; then 
        debug_msg " check for site default MPI flavour"
        if test "x$MPI_DEFAULT_FLAVOUR" != "x"  ; then
            debug_msg "   using default MPI flavour : $MPI_DEFAULT_FLAVOUR"
            export I2G_MPI_TYPE=$MPI_DEFAULT_FLAVOUR
        else
            debug_msg " no MPI flavour specified, using generic."
            export I2G_MPI_TYPE="generic"
        fi
    else
        debug_msg " using user requested MPI flavour"
    fi 

    # load the mpi plugin
    MPI_PLUGIN_FILE=$MPI_START_PREFIX/../etc/mpi-start/$I2G_MPI_TYPE.mpi
    if test ! -e $MPI_PLUGIN_FILE  ; then 
        error_msg "failed to find requested MPI type : $I2G_MPI_TYPE"
        dump_env 
        exit 2
    fi

    MPI_TYPE=`echo $I2G_MPI_TYPE | tr "[:lower:]" "[:upper:]" | tr "-" "_"`
    US=_
    MPI_PREFIX="MPI_"
    MPI_PATH_SUFFIX="_PATH"
    MPI_MODULE_SUFFIX="_MODULES"
    MPI_VERSION_SUFFIX="_VERSION"

    if test "x$I2G_MPI_VERSION" != "x" ; then
        # TODO: check this sed expression
        debug_msg " check for user requested MPI version : $I2G_MPI_VERSION"
        MPI_VERSION=`echo $I2G_MPI_VERSION | sed -e s /\\\\./__/g`
        VALUE=`eval echo \\$${MPI_PREFIX}${MPI_TYPE}${US}${MPI_VERSION}${MPI_PATH_SUFFIX}`
        if test "x$VALUE" != "x"  ; then
            debug_msg " found user requested version"
            export MPI_START_MPI_PREFIX=$VALUE
        else
            error_msg " cannot find user request MPI version"
            dump_env
            exit 1
        fi
    else
        MPI_VERSION=`eval echo \\$${MPI_PREFIX}${MPI_TYPE}${MPI_VERSION_SUFFIX}`
    fi

    # FIXME: why there is I2G_<flavour>_PREFIX and MPI_<flavour>_PATH ?
    #        will keep both to keep compatibility, but one of them should
    #        be removed
    #        I2G_<flavour>_PREFIX takes precedence over the others
    #        then MPI_<flavour>_<version>_PATH and last
    #        MPI_<flavour>_PATH
    I2G_PREFIX=`eval echo \\$I2G_${MPI_TYPE}_PREFIX`
    if test "x$I2G_PREFIX" = "x" ; then
        # first check the one with version included
        VALUE=`eval echo \\$${MPI_PREFIX}${MPI_TYPE}${US}${MPI_VERSION}${MPI_PATH_SUFFIX}`
        if test "x$VALUE" = "x" ; then
            debug_msg " found MPI version: $MPI_VERSION"
            MPI_START_MPI_PREFIX=$VALUE
        else
            # try default without version
            VALUE=`eval echo \\$${MPI_PREFIX}${MPI_TYPE}${MPI_PATH_SUFFIX}`
            if test "x$VALUE" != "x"  ; then 
                debug_msg " found default MPI in: $VALUE"
                MPI_START_MPI_PREFIX=$VALUE
            else
                #debug_msg " coulnd't find EGEE environment"
                MPI_START_MPI_PREFIX=
            fi
        fi
    else
        debug_msg "use user provided prefix : $I2G_PREFIX"
        $MPI_START_MPI_PREFIX=$I2G_PREFIX
    fi
    export MPI_START_MPI_PREFIX
    
    # source the MPI specific configuration file
    info_msg "activate support for $I2G_MPI_TYPE"
    debug_msg "source : $MPI_PLUGIN_FILE"
    . $MPI_PLUGIN_FILE
    if test $? -ne 0 ; then
        error_msg "Error loading the MPI plugin: $MPI_PLUGIN_FILE"
        dump_env
        exit 1
    fi

    # export X509_USER_PROXY if it's there.
    if test "x$X509_USER_PROXY" != "x" ; then
        mpi_start_export_variable X509_USER_PROXY
    fi

    # call the MPI specific startup functions
    info_msg "call backend MPI implementation"
    mpi_start
    result=$?

    exit $result
}

#======================================================================
#  Just call the main function 
#======================================================================
main
