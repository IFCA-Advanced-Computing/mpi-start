#!/bin/sh
#
# Copyright (c) 2006-2007 High Performance Computing Center Stuttgart,
#                         University of Stuttgart.  All rights reserved.
#

SCHEDULER_NAME="pbs"

#
# This function checks if the current job is running in a PBS 
# environment.
#
# Return values :
#  0     - Support for this kind of scheduler is found.
#  else  - NO support for this of scheduler is found. 
#
scheduler_available () {
    debug_msg " checking for \$PBS_NODEFILE"
	if test "x$PBS_NODEFILE" = "x" ; then 
		return 13;
	else
		return 0
	fi
}

#
# This function is called to setup 
scheduler_get_machinefile () {
    debug_msg " return PBS_NODEFILE"
    [ ! -f "$PBS_NODEFILE" ] && return 13
    export MPI_START_MACHINEFILE=`mktemp`
    export MPI_START_HOSTFILE=`mktemp`
    export MPI_START_HOST_SLOTS_FILE=`mktemp`
    cat $PBS_NODEFILE > $MPI_START_MACHINEFILE
    cat $MPI_START_MACHINEFILE | sort | uniq -c | tr -s " " |
         # this is a subshell, variables changes here are not changed outside!
         while read line; do
             slots=`echo $line | cut -f1 -d" "`
             host=`echo $line | cut -f2 -d" "`
             echo $host >> $MPI_START_HOSTFILE
             echo $host $slots >> $MPI_START_HOST_SLOTS_FILE
         done
         # this only works in bash
         # < <( cat $MPI_START_MACHINEFILE | sort | uniq -c | tr -s " " )
    export MPI_START_NHOSTS=`cat $MPI_START_HOSTFILE | wc -l`
    export MPI_START_NSLOTS_PER_HOST=`cat $MPI_START_HOST_SLOTS_FILE | cut -f2 -d" " | sort -n | head -1`
    export MPI_START_NSLOTS=`cat $MPI_START_MACHINEFILE | wc -l`
    return 0
}
