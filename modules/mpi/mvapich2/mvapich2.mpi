#!/bin/bash

#
# Copyright (c) 2006-2007 High Performance Computing Center Stuttgart,
#                         University of Stuttgart.  All rights reserved.
# Copyright (c) 2006-2007 Charles Loomis
#           (c) 2009-2010 Instituto de Fisica de Cantabria - CSIC. 
#

if test "x$MPI_START_MPI_PREFIX" = "x"  ; then    
    export MPI_START_MPI_PREFIX=/usr
    debug_msg "use default mpi path: $MPI_START_MPI_PREFIX"
fi

export OSC_MPIEXEC=0
export HYDRA_MPIEXEC=0
export MPIRUN_RSH=0

# activate MPI
mpi_start_activate_mpi $MPI_START_MPI_PREFIX $MPI_START_MPI_MODULE
# further determine if the mpiexec is OSC or hydra or mpirun_rsh 
if test $MPI_MPIEXEC_DEFINED -eq 0 -a $MPI_MPIRUN_DEFINED -eq 0; then
    $MPI_MPIEXEC 2>&1 | grep -e "-\<np\>" > /dev/null 2>&1
    st=$?
    if test $st -ne 0 ; then
        export OSC_MPIEXEC=1
    else
        # try with mpiexec.hydra
        MPIEXEC=`which mpiexec.hydra 2> /dev/null`
        if test $? -eq 0 -a "x$MPI_MVAPICH2_DISABLE_HYDRA" != "x1" ; then
            export HYDRA_MPIEXEC=1
            MPI_MPIEXEC=$MPIEXEC
        else
            # try to find mpirun_rsh 
            MPIRUN=`which mpirun_rsh > /dev/null`
            if test $? -eq 0 ; then
                MPI_MPIRUN=$MPIRUN
                export MPIRUN_RSH=1
            fi
        fi
    fi
else
    # check aslo here if we are using OSC
    $MPI_MPIEXEC 2>&1 | grep -e "-\<np\>" > /dev/null 2>&1
    st=$?
    if test $st -ne 0 ; then
        export OSC_MPIEXEC=1
    fi
fi

# start an mpi job with mpd
mvapich2_with_mpirunrsh() {
    debug_msg "assume it is safe to set the machinefile and number of processes"
    if test "x${MPI_START_NPHOST}" != "x" ; then
        debug_msg "Creating machine file for per node option"
        mpi_start_mktemp
        MACHINES=$MPI_START_TEMP_FILE
        for host in `cat "$MPI_START_HOSTFILE"` ; do 
            for ((i=0; i < MPI_START_NPHOST; i++)) ; do
                echo $host >> $MACHINES
            done
        done
    else
        if test $MPI_START_NP -gt $MPI_START_NSLOTS ; then
            debug_msg "Creating machine file for starting more processes than available slots"
            mpi_start_mktemp
            MACHINES=$MPI_START_TEMP_FILE
            while test `cat "$MACHINES" | wc -l` -lt $MPI_START_NP ; do
                cat "$MPI_START_MACHINEFILE" >> $MACHINES
            done
        else
            MACHINES=$MPI_START_MACHINEFILE
        fi
    fi
    local machines_params="-np $MPI_START_NP -hostfile $MACHINES"

    MPI_GLOBAL_PARAMS="$MPI_GLOBAL_PARAMS $MVAPICH2_PARAMS $machines_params"

    # set the environment variables
    if test "x${MPI_START_ENV_VARIABLES}" != "x" ; then
        local vars=${#MPI_START_JOB_ENV[*]}
        local index=0

        while [ $index -lt $vars ]; do
            MPI_LOCAL_PARAMS="${MPI_LOCAL_PARAMS} ${MPI_START_JOB_ENV[$index]}"
            index=$(($index+1))
        done
    fi
    mpi_start_get_plugin "generic_mpiexec.sh" 1
    . $MPI_START_PLUGIN_FILES
    generic_mpiexec
    err=$?

    return $err
}

#
# start an mpi job
#
mpi_exec () {
    if test "$MPI_START_SCHEDULER" = "slurm" ; then
        slurm_mpiexec
        return $?
    fi

    if test $OSC_MPIEXEC -eq 1 ; then
        MPIEXEC=$MPI_MPIEXEC
        MPI_GLOBAL_PARAMS=$MPI_SPECIFIC_MPIEXEC_PARAMS
        # OSC mpiexec! 
        # if a comm method has already been requested don't set
        if `echo $MPI_GLOBAL_PARAMS | grep -vq "comm=" 2> /dev/null`; then
            MPI_GLOBAL_PARAMS="$MPI_GLOBAL_PARAMS --comm=pmi"
        fi
        if test "x$MPI_START_NPHOST" = "x1" ; then
            MPI_GLOBAL_PARAMS="$MPI_GLOBAL_PARAMS -pernode"
        elif test "x${I2G_MPI_PER_NODE}" != "x" ; then
            warn_msg "Per node option ignored when using OSC mpiexec"
        fi
        mpi_start_get_plugin "generic_mpiexec.sh" 1
        . $MPI_START_PLUGIN_FILES
        generic_mpiexec
        err=$?
    elif test $HYDRA_MPIEXEC -eq 1 ; then
        mpi_start_get_plugin "hydra.sh" 1
        . $MPI_START_PLUGIN_FILES
        HYDRA_EXTRA_PARAMS=$MVAPICH2_PARAMS
        mpiexec_with_hydra
        err=$?
    elif test $MPIRUN_RSH -eq 1 ; then
        MPIEXEC=$MPI_MPIRUN
        mvapich2_with_mpirunrsh
        err=$?
    else
        if test "x${MPI_MPIRUN}" != "x" ; then
            MPIEXEC=$MPI_MPIRUN
        elif test "x${MPI_MPIEXEC}" != "x" ; then
            MPIEXEC=$MPI_MPIEXEC
        else
            err_msg "No mpirun/mpiexec found."
            dump_env
            exit 1
        fi
        info_msg "Using generic mpirun/mpiexec options."
        mpi_start_get_plugin "generic_mpiexec.sh" 1
        . $MPI_START_PLUGIN_FILES
        generic_mpiexec
        err=$?
    fi

    return $err
}


mpi_start () {
    mpi_start_get_plugin "generic_mpi_start.sh" 1
    . $MPI_START_PLUGIN_FILES
    generic_mpi_start
    return $?
}
