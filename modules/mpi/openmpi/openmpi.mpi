#!/bin/bash

#
# Copyright (c) 2006-2007 High Performance Computing Center Stuttgart,
#                         University of Stuttgart.  All rights reserved.
#           (c) 2009-2010 Instituto de Fisica de Cantabria - CSIC. 
#                         All rights reserved.

search_openmpi_info_command() {
    MPI_OPENMPI_INFO="ompi_info"
    which $MPI_OPENMPI_INFO>& /dev/null
    if test $? -eq 1 ; then
        MPI_OPENMPI_INFO="opal_info"
        which $MPI_OPENMPI_INFO >& /dev/null
        return $?
    fi
    export MPI_OPENMPI_INFO
    return 0
}

if test "x$MPI_START_MPI_PREFIX" = "x"  ; then    
    # assume ompi_info knows the correct prefix,
    search_openmpi_info_command
    ompi_path=`$MPI_OPENMPI_INFO --path prefix --parseable 2> /dev/null`
    if test $? -ne 0 ; then
        # if fails, set default in SLC5
        export MPI_START_MPI_PREFIX=/usr/lib64/openmpi/1.4-gcc
        debug_msg "use default mpi path: $MPI_START_MPI_PREFIX"
    else
        export MPI_START_MPI_PREFIX=`echo $ompi_path | cut -f3- -d":"`
        debug_msg "use system mpi path: $MPI_START_MPI_PREFIX"
    fi
fi

# activate MPI
mpi_start_activate_mpi $MPI_START_MPI_PREFIX "$MPI_START_MPI_MODULE"
search_openmpi_info_command
# get openmpi version
export OPENMPI_VERSION_MAJOR=`$MPI_OPENMPI_INFO --parseable -v ompi major | grep "ompi:version:full" | cut -f4 -d":"` 
export OPENMPI_VERSION_MINOR=`$MPI_OPENMPI_INFO --parseable -v ompi minor | grep "ompi:version:full" | cut -f4 -d":"` 
export OPENMPI_VERSION_RELEASE=`$MPI_OPENMPI_INFO --parseable -v ompi release | grep "ompi:version:full" | cut -f4 -d":"` 
export OPENMPI_SET_NP=1

if test "x$MPI_START_DISABLE_LRMS_INTEGRATION" == "xyes"; then
    # we are not the primary MPI 
    # fall back to save settings that should work always
    debug_msg "disable PBS, SGE"
    OPENMPI_PARAMS="-mca pls ^tm,gridengine -mca ras ^tm,gridengine  "
fi

if test "x$MPI_START_SSH_AGENT" != "x"; then
    # we are not using default start methods, setting specific ssh 
    debug_msg "setting specific ssh agent"
    # plm_rsh_agent is deprecated in newer versions of Open MPI 
    # need to check version and set the appropriate parameter
    OPENMPI_PARAMS="-mca pls ^tm,gridengine -mca ras ^tm,gridengine -mca plm_rsh_agent $MPI_START_SSH_AGENT"
    export MPI_START_DISABLE_LRMS_INTEGRATION="yes"
fi

#
# start an mpi job
#
mpi_exec () {
    . $MPI_START_ETC/common.sh
    mpi_start_search_mpiexec

    if test "x${MPI_MPIEXEC}" != "x"; then
        MPIEXEC="$MPI_MPIEXEC"
        MPI_GLOBAL_PARAMS="$MPI_SPECIFIC_MPIEXEC_PARAMS"
        # TODO: What is I2G_MPI_MPIEXEC_PARAMS exactly???
        MPI_GLOBAL_PARAMS="$MPI_GLOBAL_PARAMS $I2G_MPI_MPIEXEC_PARAMS"
    elif test "x$MPI_MPIRUN" != "x"; then
        MPIEXEC="$MPI_MPIRUN"
        MPI_GLOBAL_PARAMS="$MPI_SPECIFIC_MPIRUN_PARAMS"
    else
        error_msg "no mpiexec/mpirun found!"
        dump_env
        exit 1
    fi

    local machines_params=""
    if test "x${MPI_START_SCHEDULER}" = "xpbs" -a "x${MPI_START_DISABLE_LRMS_INTEGRATION}" != "xyes" ; then
        $MPI_OPENMPI_INFO --parseable | grep "pls:tm" &> /dev/null
        if test $? -eq 0 ; then
            debug_msg "found openmpi and PBS (with pbs support enabled), don't set machinefile"
        else
            machines_params="-machinefile $MPI_START_MACHINEFILE"
        fi 
    else
        # non pbs, set machine file and np
        machines_params="-machinefile $MPI_START_MACHINEFILE"
    fi


    if test "x${MPI_START_NPHOST}" != "x" ; then
        machines_params="$machines_params -npernode $MPI_START_NPHOST"
    else
        # do not set -np if we are using npernode
        machines_params="$machines_params -np $MPI_START_NP"
    fi

    # set the parameters to be always used with Open MPI:
    MPI_GLOBAL_PARAMS="$MPI_GLOBAL_PARAMS -wdir $PWD "
    for var in $MPI_START_ENV_VARIABLES; do
        MPI_GLOBAL_PARAMS="$MPI_GLOBAL_PARAMS -x $var"
    done
    MPI_GLOBAL_PARAMS="$MPI_GLOBAL_PARAMS --prefix $MPI_START_MPI_PREFIX $OPENMPI_PARAMS $machines_params"

    . $MPI_START_ETC/generic_mpiexec.sh
    generic_mpiexec
    return $?
}


mpi_start () {
    . $MPI_START_ETC/generic_mpi_start.sh
    generic_mpi_start
    return $?
}
