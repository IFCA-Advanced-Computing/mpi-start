#!/bin/bash

#
# Copyright (c) 2006-2007 High Performance Computing Center Stuttgart, 
#                         University of Stuttgart.  All rights reserved. 
#           (c) 2009      Instituto de Fisica de Cantabria - CSIC.
#

check_distribution_method(){
    result=255
    if test "x$MPI_SHARED_HOME" = "xyes" -a "x${MPI_SHARED_HOME_PATH}" != "x"; then
        result=0
    fi
    return $result
}

copy() {
    debug_msg "distribute using cptoshared"
    export MPI_START_CPTOSHARED_HOME=$PWD

    # create temp directory in shared area, 
    # to avoid any false sharing or recursive copy
    export SHARED_BASE_PATH=${MPI_SHARED_HOME_PATH}/`hostname`.${$}
    mkdir ${SHARED_BASE_PATH}

    tar xzf ${TARBALL} -C ${SHARED_BASE_PATH} 
    # change the permissions of the "prefix" to allow
    # other users to create files there
    if test "x$EDG_WL_SCRATCH" != "x"; then
        chmod a+w ${SHARED_BASE_PATH}/${EDG_WL_SCRATCH}
        chmod a+w ${SHARED_BASE_PATH}/${EDG_WL_SCRATCH}/.mpi
    fi


    if test "x${I2G_MPI_APPLICATION}" != "x" ; then
        if test "${I2G_MPI_APPLICATION/#\/}" == "${I2G_MPI_APPLICATION}" ;  then
            WHICHAPP=`which $I2G_MPI_APPLICATION 2> /dev/null`
            if test $? -eq 0 ; then 
                if test `dirname $WHICHAPP` == '.' ; then
                    export I2G_MPI_APPLICATION=${SHARED_BASE_PATH}/${MYDIR}/${I2G_MPI_APPLICATION}
                fi
            else
                export I2G_MPI_APPLICATION=${SHARED_BASE_PATH}/${MYDIR}/${I2G_MPI_APPLICATION}
            fi
        else
            APP_CANONIC=`readlink -f ${I2G_MPI_APPLICATION} 2> /dev/null`
            MYDIR_CANONIC=`readlink -f ${MYDIR} 2> /dev/null`
            if test $? -eq 0; then    # readlink may not available
                if test `dirname ${APP_CANONIC}` == $MYDIR_CANONIC; then
                    export I2G_MPI_APPLICATION=${SHARED_BASE_PATH}/${MYDIR}/`basename ${APP_CANONIC}`
                fi
            else
                # XXX FIX THIS
                echo "BREAKS"
            fi
        fi
    fi
    cd ${SHARED_BASE_PATH}/${MYDIR}
    export MPI_START_SHARED_FS=1
    return 0
}

clean() {
    debug_msg "Removing distributed files"
    cd $MPI_START_CPTOSHARED_HOME
    rm -rf ${SHARED_BASE_PATH}
    return 0
}
