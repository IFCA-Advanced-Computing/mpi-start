#!/bin/sh
#
# Copyright (c) 2006-2007 High Performance Computing Center Stuttgart,
#                         University of Stuttgart.  All rights reserved.
# Copyright (c) 2006-2007 Laboratório de Instrumentação e Física Experimental de Partículas 
#                         University of Lisbon.  All rights reserved.
#

SCHEDULER_NAME="sge"


#
# This function checks if the current job is running in a SGE
# environment.
#
# Return values :
#  0     - Support for this kind of scheduler is found.
#  else  - NO support for this of scheduler is found. 
#
scheduler_available () {
    debug_msg " checking for \$PE_HOSTFILE"
	if test "x$PE_HOSTFILE" = "x" ; then 
		return 13;
	else
		return 0
	fi
}

#
# This function is called to setup 
scheduler_get_machinefile () {
    debug_msg " convert PE_HOSTFILE into standard format"
    [ ! -f "$PE_HOSTFILE" ] && return 13
    export MPI_START_MACHINEFILE=`mktemp`
    export MPI_START_HOSTFILE=`mktemp`
    export MPI_START_HOST_SLOTS_FILE=`mktemp`
    while read line; do
        [ -z "$line" ] && break
        host=`echo $line | cut -f1 -d" "`
        slots=`echo $line | cut -f2 -d" "`
        echo $host >> $MPI_START_HOSTFILE
        echo $host $slots >> $MPI_START_HOST_SLOTS_FILE
        while [ $slots -ne 0 ]; do
            echo $host >> $MPI_START_MACHINEFILE
            slots=`expr $slots - 1`
        done
    done < $PE_HOSTFILE
    export MPI_START_HOSTS=`cat $MPI_START_HOSTFILE | wc -l`
    export MPI_START_SLOTS=`cat $MPI_START_MACHINEFILE | wc -l`
    export MPI_START_SLOTS_PER_HOST=`cat $MPI_START_HOST_SLOTS_FILE | cut -f2 -d" " | sort -n | head -1`
    return 0
}
