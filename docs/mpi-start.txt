#
# Copyright (c) 2006-2007 High Performance Computing Center Stuttgart,
#                         University of Stuttgart.  All rights reserved.
#

  +-------------------------------------------------------------------+
 /                                                                   /|
+-------------------------------------------------------------------+ |
|                                                                   | |
|      @   @  @@@@   @       @@@@@  @@@@@   @@    @@@@   @@@@@      | |
|      @@ @@  @   @  @       @        @    @  @   @   @    @        | |
|      @ @ @  @@@@   @  @@@  @@@@@    @    @@@@   @@@@     @        | |
|      @   @  @      @           @    @   @    @  @   @    @        | |
|      @   @  @      @       @@@@@    @   @    @  @   @    @        | +
|                                                                   |/
+-------------------------------------------------------------------+

1.0 Description
2.0 Installation
3.0 Usage
 3.1 Environment Variables
 3.2 Example: Simple Job
 3.3 Example: Job with user specified hooks
4.0 Developer Information
 4.1 Debugging
 4.2 Internal Variables
 4.3 Scheduler plugins
 4.4 MPI plugins

========================================================================
== 1.0 Description
========================================================================
MPI-START is an abstration layer that offers a uniqe interface to start
MPI jobs with different MPI implementations.


========================================================================
== 2.0 Installation
========================================================================
Installation is as easy as "make install". The default installation
prefix is "/opt/i2g". Only change this if you know what you are
doing. After the installation the environment variable I2G_MPI_START
must be set to point to mpi-start script.

export I2G_MPI_START=/opt/i2g/bin/mpi-start

NOTE: In the current version mpi-start will fall back to the default 
      location when the I2G_MPI_START is not set. This is only a temp.
      workaround until the whole infratructure is ready.


========================================================================
== 3.0 Usage
========================================================================
All necessary information of the mpi-start program are provided via
environment  variables. A user has to set the below specified variables
before executing mpi-start.


------------------------------------------------------------------------
-- 3.1 Environment Variables
------------------------------------------------------------------------
- I2G_MPI_APPLICATION
  The application binary to execute.

- I2G_MPI_APPLICATION_ARGS
  The command line parameters for the application

- I2G_MPI_TYPE
  The name of the MPI implementation to use. So far defined values :
  - openmpi
  - pacx-mpi
  - mpich-p4

- I2G_MPI_VERSION
  Specifies the version of the MPI implementation specified by
  I2G_MPI_TYPE. If not specified the default version will be used.

- I2G_MPI_PRE_RUN_HOOK
  This variable can be set to a script which must define the
  pre_run_hook function. This function will be called after the MPI
  support has been established and before the internal pre-run
  hooks. This hook can be used to prepare input data or compile the
  program.

- I2G_MPI_POST_RUN_HOOK
  This variable can be set to a script which must define the
  post_run_hook function. This function will be called after the
  mpirun has finished.

- I2G_MPI_PRECOMMAND
  This variable allows the run mpirun "inside" another program.
  $I2G_MPI_PRECOMMAND mpirun ...

- I2G_MPI_FLAVOUR
  Specifies which "sub-mpi" to use. In the case of a PACX-MPI jobs
  this variable specifies the local MPI implementation to use. Else
  this variable is equal to I2G_MPI_TYPE.
  
- I2G_MPI_JOB_NUMBER
  If a MPI Job runs across multiple clusters this variable specifies
  which sub-job should be started on this cluster. The values are
  0,1,2,... . In the case of a MPI job that runs only inside the local
  cluster this variable is always 0.

- I2G_MPI_STARTUP_INFO
  This variables provides additional information for the start of the
  MPI programm.  In the case of the PACX-MPI this variable specifies
  the connection information to the startup server (FQDN:PORT).

- I2G_MPI_RELAY
  This variable specifies a FQDN of a host that can be used as
  relay/proxy host. In the case of PACX-MPI on this host the
  additional 2 proxy proxies will be started. It's required that this
  host has out-bound connectivity and is accessable via ssh.


------------------------------------------------------------------------
-- 3.2 EGEE Environment
------------------------------------------------------------------------
mpi-start supports the EGEE environment variable schema for specifing
the local MPI installations. For the latest specification of the EGEE
environment specification refer to :

http://www.grid.ie/mpi/wiki


------------------------------------------------------------------------
-- 3.3 Example: Simple Job
------------------------------------------------------------------------
#!/bin/sh
# IMPORTANT : This example script execute a 
#             non-mpi  program
#
export I2G_MPI_APPLICATION=/bin/hostname
export I2G_MPI_APPLICATION_ARGS=
export I2G_MPI_NP=2
export I2G_MPI_TYPE=openmpi
export I2G_MPI_FLAVOUR=openmpi
export I2G_MPI_JOB_NUMBER=0
export I2G_MPI_STARTUP_INFO=
export I2G_MPI_PRECOMMAND=
export I2G_MPI_RELAY=

$I2G_MPI_START


------------------------------------------------------------------------
-- 3.4 Example: Job with user specified hooks
------------------------------------------------------------------------
#!/bin/sh
#
# MPI_START_SHARED_FS can be used to figure out if the current working
# is located on a shared file system or not. (1=yes, 0=no);
#
# The "mpi_start_foreach_host" function takes as parameter the name of 
# another function that will be called for each host in the machine as 
# first parameter. 
# - For each host the callback function will be called exactly once, 
#   independent how often the host appears in the machinefile.
# - The callback function will also be called for the local host.

# create the pre-run hook
cat > pre_run_hook.sh << EOF
pre_run_hook () {
    echo "pre run hook called "
    # - download data
    # - compile program

    if [ "x\$MPI_START_SHARED_FS" = "x0" ] ; then
        echo "If we need a shared file system we can return -1 to abort" 
        # return -1
    fi

    return 0
}
EOF

# create the post-run hook 
cat > post_run_hook.sh << EOF
# the first paramter is the name of a host in the 
my_copy () {
    CMD="scp . \$1:\$PWD/mydata.1"
    echo \$CMD
    #\$CMD
    # upload data
}

post_run_hook () {
    echo "post_run_hook called"
    if [ "x\$MPI_START_SHARED_FS" = "x0" ] ; then
        echo "gather output from remote hosts"
        mpi_start_foreach_host my_copy
    fi
    return 0
}
EOF

export I2G_MPI_APPLICATION=mpi_sleep
export I2G_MPI_APPLICATION_ARGS=0
export I2G_MPI_TYPE=openmpi
export I2G_MPI_PRE_RUN_HOOK=./pre_run_hook.sh
export I2G_MPI_POST_RUN_HOOK=./post_run_hook.sh

$I2G_MPI_START



========================================================================
== 4.0 Developer information
========================================================================
This section gives a short overview about the internals of mpi-start and 
the interfaces of different component


------------------------------------------------------------------------
-- 4.1 Debugging
------------------------------------------------------------------------
For debugging purpose the I2G_MPI_START_DEBUG variable can be set to 1
to enable the debugging output. The I2G_MPI_START_VERBOSE variable can
be set to 1 to turn on the additional output. The variable
I2G_MPI_START_TRACE can be set to 1 to trace every operation that is
performed by mpi-start (goes to stdout).


------------------------------------------------------------------------
-- 4.2 Internal Variables
------------------------------------------------------------------------
- MPI_START_MACHINEFILE
  This variable points a machinefile in the standard format. In the 
  standard format there is one host per line. If multiple processes
  should run on a host this host must be inserted multiple times.

- MPI_START_MPI_PREFIX
  Specifies the prefix to the MPI implementation in the case that
  mpi-start is running in a EGEE compatible environment.

- MPI_START_MPI_MODULE
  Specifies which modules should be loaded to setup the environment
  for the selected MPI implementation.

------------------------------------------------------------------------
-- 4.3 Scheduler plugins
------------------------------------------------------------------------
A scheduler plugin is responsible for detection of a runtime system and 
the creation of a "default" machinefile. A scheduler plugin must provide
the following function:

- scheduler_available
  This function is called to detect if the job is running in the
  supported environment or not. If the supported environent is 
  found 0 must be returned else -1.

- scheduler_get_machinefile
  After the successfully detecion of a scheduler environment this
  function is called to set the MPI_START_MACHINEFILE


------------------------------------------------------------------------
-- 4.4 MPI plugins
------------------------------------------------------------------------
A scheduler plugin is responsible for setting up the MPI environemnt
for the specified MPI version. A MPI plugin has to provide the
following functions:

- mpi_start
  This function is called by the mpi-start core to start a parallel
  job. This function conists (at least) of the following steps:
  1. setup parallel environment if necessary (e.g. start daemons)
  2. activate the pre-run hooks (call mpi_start_pre_run_hook)
  3. call mpi_exec to start the parallel job
  4. activate the post-run hooks (call mpi_start_post_run_hook)
  5. shutdown parallel environment if necessary (e.g. shutdown daemons)

- mpi_exec
  This function actually perform the execution of the parallel job
  (mpirun/mpiexec). This functionality has been separated from the
  setup/shutdown phase to allow usage of the parallel environment in
  the pre-/post-run hooks.
